
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.0'

_lr_method = 'LALR'

_lr_signature = 196885918
    
_lr_action_items = {'RPAREN':([3,11,12,16,18,19,21,22,],[-12,-7,19,21,-8,-6,-9,-11,]),'NAME':([0,1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,20,21,22,],[2,11,-7,-12,11,-3,2,-4,11,-7,11,-10,-2,11,-8,-6,-5,-9,-11,]),'INT':([0,1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,20,21,22,],[3,3,-7,-12,3,-3,3,-4,3,-7,3,-10,-2,3,-8,-6,-5,-9,-11,]),'EQUALS':([2,],[13,]),'PLUS':([2,3,9,11,12,14,18,19,20,21,22,],[-7,-12,17,-7,17,17,-8,-6,17,-9,-11,]),'LPAREN':([0,1,2,3,5,6,7,8,9,10,11,13,14,15,17,18,19,20,21,22,],[1,1,-7,-12,1,-3,1,16,-4,1,-7,1,-10,-2,1,-8,-6,-5,-9,-11,]),'PRINT':([0,2,3,6,7,9,11,14,15,18,19,20,21,22,],[5,-7,-12,-3,5,-4,-7,-10,-2,-8,-6,-5,-9,-11,]),'INPUT':([0,1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,20,21,22,],[8,8,-7,-12,8,-3,8,-4,8,-7,8,-10,-2,8,-8,-6,-5,-9,-11,]),'MINUS':([0,1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,20,21,22,],[10,10,-7,-12,10,-3,10,-4,10,-7,10,-10,-2,10,-8,-6,-5,-9,-11,]),'$end':([2,3,4,6,7,9,11,14,15,18,19,20,21,22,],[-7,-12,0,-3,-1,-4,-7,-10,-2,-8,-6,-5,-9,-11,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[7,]),'expression':([0,1,5,7,10,13,17,],[9,12,14,9,18,20,22,]),'statement':([0,7,],[6,15,]),'module':([0,],[4,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> statement_list','module',1,'p_module','parser.py',42),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',46),
  ('statement_list -> statement','statement_list',1,'p_statement','parser.py',50),
  ('statement -> expression','statement',1,'p_statement_expression','parser.py',54),
  ('statement -> NAME EQUALS expression','statement',3,'p_name_equals','parser.py',58),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_parens','parser.py',63),
  ('expression -> NAME','expression',1,'p_name','parser.py',67),
  ('expression -> MINUS expression','expression',2,'p_unarysub','parser.py',71),
  ('expression -> INPUT LPAREN RPAREN','expression',3,'p_input','parser.py',75),
  ('statement -> PRINT expression','statement',2,'p_print_statement','parser.py',81),
  ('expression -> expression PLUS expression','expression',3,'p_plus_expression','parser.py',85),
  ('expression -> INT','expression',1,'p_int_expression','parser.py',89),
]
