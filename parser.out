Created by PLY version 3.0 (http://www.dabeaz.com/ply)

Grammar

Rule 1     S' -> module
Rule 2     module -> statement_list
Rule 3     statement_list -> statement_list statement
Rule 4     statement_list -> statement
Rule 5     statement -> expression
Rule 6     statement -> NAME EQUALS expression
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> NAME
Rule 9     expression -> MINUS expression
Rule 10    expression -> INPUT LPAREN RPAREN
Rule 11    statement -> PRINT expression
Rule 12    expression -> expression PLUS expression
Rule 13    expression -> INT

Terminals, with rules where they appear

EQUALS               : 5
INPUT                : 9
INT                  : 12
LPAREN               : 6 9
MINUS                : 8
NAME                 : 5 7
PLUS                 : 11
PRINT                : 10
RPAREN               : 6 9
error                : 

Nonterminals, with rules where they appear

expression           : 4 5 6 8 10 11 11
module               : 0
statement            : 2 3
statement_list       : 1 2

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression
    (5) statement -> . NAME EQUALS expression
    (10) statement -> . PRINT expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NAME
    (8) expression -> . MINUS expression
    (9) expression -> . INPUT LPAREN RPAREN
    (11) expression -> . expression PLUS expression
    (12) expression -> . INT

    NAME            shift and go to state 2
    PRINT           shift and go to state 5
    LPAREN          shift and go to state 1
    MINUS           shift and go to state 10
    INPUT           shift and go to state 8
    INT             shift and go to state 3

    statement_list                 shift and go to state 7
    expression                     shift and go to state 9
    statement                      shift and go to state 6
    module                         shift and go to state 4

state 1

    (6) expression -> LPAREN . expression RPAREN
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NAME
    (8) expression -> . MINUS expression
    (9) expression -> . INPUT LPAREN RPAREN
    (11) expression -> . expression PLUS expression
    (12) expression -> . INT

    LPAREN          shift and go to state 1
    NAME            shift and go to state 11
    MINUS           shift and go to state 10
    INPUT           shift and go to state 8
    INT             shift and go to state 3

    expression                     shift and go to state 12

state 2

    (5) statement -> NAME . EQUALS expression
    (7) expression -> NAME .

    EQUALS          shift and go to state 13
    PLUS            reduce using rule 7 (expression -> NAME .)
    NAME            reduce using rule 7 (expression -> NAME .)
    PRINT           reduce using rule 7 (expression -> NAME .)
    LPAREN          reduce using rule 7 (expression -> NAME .)
    MINUS           reduce using rule 7 (expression -> NAME .)
    INPUT           reduce using rule 7 (expression -> NAME .)
    INT             reduce using rule 7 (expression -> NAME .)
    $end            reduce using rule 7 (expression -> NAME .)


state 3

    (12) expression -> INT .

    PLUS            reduce using rule 12 (expression -> INT .)
    NAME            reduce using rule 12 (expression -> INT .)
    PRINT           reduce using rule 12 (expression -> INT .)
    LPAREN          reduce using rule 12 (expression -> INT .)
    MINUS           reduce using rule 12 (expression -> INT .)
    INPUT           reduce using rule 12 (expression -> INT .)
    INT             reduce using rule 12 (expression -> INT .)
    $end            reduce using rule 12 (expression -> INT .)
    RPAREN          reduce using rule 12 (expression -> INT .)


state 4

    (0) S' -> module .



state 5

    (10) statement -> PRINT . expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NAME
    (8) expression -> . MINUS expression
    (9) expression -> . INPUT LPAREN RPAREN
    (11) expression -> . expression PLUS expression
    (12) expression -> . INT

    LPAREN          shift and go to state 1
    NAME            shift and go to state 11
    MINUS           shift and go to state 10
    INPUT           shift and go to state 8
    INT             shift and go to state 3

    expression                     shift and go to state 14

state 6

    (3) statement_list -> statement .

    NAME            reduce using rule 3 (statement_list -> statement .)
    PRINT           reduce using rule 3 (statement_list -> statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement .)
    MINUS           reduce using rule 3 (statement_list -> statement .)
    INPUT           reduce using rule 3 (statement_list -> statement .)
    INT             reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 7

    (1) module -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression
    (5) statement -> . NAME EQUALS expression
    (10) statement -> . PRINT expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NAME
    (8) expression -> . MINUS expression
    (9) expression -> . INPUT LPAREN RPAREN
    (11) expression -> . expression PLUS expression
    (12) expression -> . INT

    $end            reduce using rule 1 (module -> statement_list .)
    NAME            shift and go to state 2
    PRINT           shift and go to state 5
    LPAREN          shift and go to state 1
    MINUS           shift and go to state 10
    INPUT           shift and go to state 8
    INT             shift and go to state 3

    expression                     shift and go to state 9
    statement                      shift and go to state 15

state 8

    (9) expression -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 16


state 9

    (4) statement -> expression .
    (11) expression -> expression . PLUS expression

    NAME            reduce using rule 4 (statement -> expression .)
    PRINT           reduce using rule 4 (statement -> expression .)
    LPAREN          reduce using rule 4 (statement -> expression .)
    MINUS           reduce using rule 4 (statement -> expression .)
    INPUT           reduce using rule 4 (statement -> expression .)
    INT             reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 17


state 10

    (8) expression -> MINUS . expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NAME
    (8) expression -> . MINUS expression
    (9) expression -> . INPUT LPAREN RPAREN
    (11) expression -> . expression PLUS expression
    (12) expression -> . INT

    LPAREN          shift and go to state 1
    NAME            shift and go to state 11
    MINUS           shift and go to state 10
    INPUT           shift and go to state 8
    INT             shift and go to state 3

    expression                     shift and go to state 18

state 11

    (7) expression -> NAME .

    PLUS            reduce using rule 7 (expression -> NAME .)
    NAME            reduce using rule 7 (expression -> NAME .)
    PRINT           reduce using rule 7 (expression -> NAME .)
    LPAREN          reduce using rule 7 (expression -> NAME .)
    MINUS           reduce using rule 7 (expression -> NAME .)
    INPUT           reduce using rule 7 (expression -> NAME .)
    INT             reduce using rule 7 (expression -> NAME .)
    $end            reduce using rule 7 (expression -> NAME .)
    RPAREN          reduce using rule 7 (expression -> NAME .)


state 12

    (6) expression -> LPAREN expression . RPAREN
    (11) expression -> expression . PLUS expression

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 17


state 13

    (5) statement -> NAME EQUALS . expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NAME
    (8) expression -> . MINUS expression
    (9) expression -> . INPUT LPAREN RPAREN
    (11) expression -> . expression PLUS expression
    (12) expression -> . INT

    LPAREN          shift and go to state 1
    NAME            shift and go to state 11
    MINUS           shift and go to state 10
    INPUT           shift and go to state 8
    INT             shift and go to state 3

    expression                     shift and go to state 20

state 14

    (10) statement -> PRINT expression .
    (11) expression -> expression . PLUS expression

    NAME            reduce using rule 10 (statement -> PRINT expression .)
    PRINT           reduce using rule 10 (statement -> PRINT expression .)
    LPAREN          reduce using rule 10 (statement -> PRINT expression .)
    MINUS           reduce using rule 10 (statement -> PRINT expression .)
    INPUT           reduce using rule 10 (statement -> PRINT expression .)
    INT             reduce using rule 10 (statement -> PRINT expression .)
    $end            reduce using rule 10 (statement -> PRINT expression .)
    PLUS            shift and go to state 17


state 15

    (2) statement_list -> statement_list statement .

    NAME            reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    INPUT           reduce using rule 2 (statement_list -> statement_list statement .)
    INT             reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 16

    (9) expression -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 21


state 17

    (11) expression -> expression PLUS . expression
    (6) expression -> . LPAREN expression RPAREN
    (7) expression -> . NAME
    (8) expression -> . MINUS expression
    (9) expression -> . INPUT LPAREN RPAREN
    (11) expression -> . expression PLUS expression
    (12) expression -> . INT

    LPAREN          shift and go to state 1
    NAME            shift and go to state 11
    MINUS           shift and go to state 10
    INPUT           shift and go to state 8
    INT             shift and go to state 3

    expression                     shift and go to state 22

state 18

    (8) expression -> MINUS expression .
    (11) expression -> expression . PLUS expression

    PLUS            reduce using rule 8 (expression -> MINUS expression .)
    NAME            reduce using rule 8 (expression -> MINUS expression .)
    PRINT           reduce using rule 8 (expression -> MINUS expression .)
    LPAREN          reduce using rule 8 (expression -> MINUS expression .)
    MINUS           reduce using rule 8 (expression -> MINUS expression .)
    INPUT           reduce using rule 8 (expression -> MINUS expression .)
    INT             reduce using rule 8 (expression -> MINUS expression .)
    $end            reduce using rule 8 (expression -> MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 17 ]


state 19

    (6) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    NAME            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    INPUT           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 6 (expression -> LPAREN expression RPAREN .)


state 20

    (5) statement -> NAME EQUALS expression .
    (11) expression -> expression . PLUS expression

    NAME            reduce using rule 5 (statement -> NAME EQUALS expression .)
    PRINT           reduce using rule 5 (statement -> NAME EQUALS expression .)
    LPAREN          reduce using rule 5 (statement -> NAME EQUALS expression .)
    MINUS           reduce using rule 5 (statement -> NAME EQUALS expression .)
    INPUT           reduce using rule 5 (statement -> NAME EQUALS expression .)
    INT             reduce using rule 5 (statement -> NAME EQUALS expression .)
    $end            reduce using rule 5 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 17


state 21

    (9) expression -> INPUT LPAREN RPAREN .

    PLUS            reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    NAME            reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    PRINT           reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    LPAREN          reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    MINUS           reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    INT             reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 9 (expression -> INPUT LPAREN RPAREN .)


state 22

    (11) expression -> expression PLUS expression .
    (11) expression -> expression . PLUS expression

    PLUS            reduce using rule 11 (expression -> expression PLUS expression .)
    NAME            reduce using rule 11 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 11 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 11 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 11 (expression -> expression PLUS expression .)
    INPUT           reduce using rule 11 (expression -> expression PLUS expression .)
    INT             reduce using rule 11 (expression -> expression PLUS expression .)
    $end            reduce using rule 11 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 11 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 17 ]

